/* globals jQuery:true, ajaxurl:true, wf_sn_ms_nonce:true, sn_block_ui:true, sn_unblock_ui:true */
/*
 * Security Ninja - Malware Scanner add-on
 * (c) 2015. Web factory Ltd
 */

// FOR THE SECOND COUNTER ON THE OVERLAY
function updateTimeCounter() {
  ++totalSeconds;
  mssecondsLabel.innerHTML = pad(totalSeconds % 60);
  msminutesLabel.innerHTML = pad(parseInt(totalSeconds / 60));
}

function pad(val) {
  var valString = val + "";
  if (valString.length < 2) {
    return "0" + valString;
  } else {
    return valString;
  }
}

var msminutesLabel = document.getElementById("mscounterminutes");
var mssecondsLabel = document.getElementById("mscounterseconds");
var totalSeconds = 0;


var actions = [
{msg1: 'Cleaning cache ... ', msg2: ' DONE!', action: 'clean_cache'},
{msg1: 'Checking malware definitions', msg2: 'DONE!', action: 'update_samples'},

{msg1: 'Checking plugins for modifications', msg2: 'DONE!', action: 'do_integrity_scan'},

  //{msg1: 'Generating list of wp_options table rows ... ', msg2: 'DONE! Found %d rows.', action: 'get_db_rows'},
  //{msg1: 'Scanning wp_options table ... ', msg2: 'DONE! Found %d suspicious rows.', action: 'scan_db'},
  {msg1: 'Scanning website for malicious code', msg2: 'DONE!', action: 'do_mal_scan'},
  {msg1: 'Generating results ... ', msg2: 'DONE!', action: 'get_results'}
  ];







  function ShieldAgainstThirdPartyErrors($) {
    // Code you want protect here...



  // handle each individual ajax call
  function do_sn_ms_request(params) {

    return jQuery.ajax({ type: 'POST',
      url: ajaxurl,
      data: {
        action: 'sn_ms_run_scan',
        what: params.action,
        _ajax_nonce: wf_sn_ms_nonce
      },
      dataType: 'json',
      success: function(response) {


  if ( response !== null ) {

        if ( response.success !== null ) {
          // no response
        }
        else {
          alert('Invalid option. Please reload');
          return;

        }


        jQuery('#msg_' + params.action).removeClass('pending').removeClass('current').addClass('passed');

        jQuery('.badge', '#msg_' + params.action).html(params.msg2.replace('%d', parseInt(response.data.cnt, 10)));

        if (params.action == 'scan_db') {
          // scan_db IS BEFORE do_mal_scan
          // LARS - using timer instead of updates from database
          //update_scan_status(); // start the update
        }

        if (params.action == 'get_results') {
            // stops the update timer
          //  clearTimeout(regularupdate);
          jQuery('#sn_ms_results').append(response.data);
          sn_unblock_ui('#sn-malware-scanner');
          jQuery('.loader').show();
          window.location.reload();
        }
      }
      }, // success
      error: function(){
        // clearTimeout(regularupdate);
        alert('An undocumented error has occured. Please reload the page and try again.');

      } // error
    });
  } // do_sn_ms_request



  // run test
  jQuery('#sn_ms_run_scan').on('click', function(e) {
    e.preventDefault();

    jQuery('#scanstatus').html();

    setInterval(updateTimeCounter, 1000);

   //  var running_scan = true;

   let startingpoint = jQuery.Deferred();
   startingpoint.resolve();

   jQuery('#sn_ms_results').html('');
   jQuery('ul.malware-scan-list').html('');
   jQuery('.wrap .error').hide();

   jQuery.each(actions, function(i, action) {

    jQuery('ul.malware-scan-list').append('<li id="msg_' + action.action +'" class="pending">' + action.msg1 + ' <span class="badge">Waiting ...</span></li>');
/*
      if (action.action=='do_mal_scan') {
        jQuery('#msg_do_mal_scan').append('<div id="scanstatus"><ul><li>Files scanned <span id="files_scanned"></span></li><li>Directories scanned <span id="directories"></span></li><li>Last directory <span id="last_processed_dir"></span></li></ul></div>');
      }
      */
    });
   jQuery('.loader').hide();

   sn_block_ui('#sn-malware-scanner');

   jQuery.each(actions, function(i, action) {

    startingpoint = startingpoint.pipe( function() {
      jQuery('#msg_' + action.action).removeClass('pending').addClass('current');
      jQuery('.badge', '#msg_' + action.action).html('Working ...');
      return do_sn_ms_request(action);
    });
      }); // each action

   jQuery('.wf-sn-ms-not-run').hide();
    //  running_scan = false;

}); // run tests










  $('#sn_ms_results').on('click', '.sn-malware-title', function(e){
    e.preventDefault();

    let content = $(this).parents('.sn-malware-filebox').find('.sn-malware-file-code');
    $(this).toggleClass('opened');
    $(content).slideToggle(500);
  });







  // reset files whitelist
  $('#sn-ms-reset-whitelist').on('click', function(e){
    e.preventDefault();

    if (!confirm('Are you sure you want to reset the whitelisted files list?\nPlease rescan files after cleaning the whitelist.')) {
      return;
    }
    $.post(ajaxurl, {
      _ajax_nonce: wf_sn_ms_nonce,
      action: 'sn_ms_reset_whitelist'
    },
    function() {
      window.location.reload();
    });
  }); // reset files whitelist






  // whitelist file
  $('#sn_ms_results').on('click', 'button.sn_ms_whitelist', function(e){
    e.preventDefault();

    let tmp = confirm('Are you sure you want to whitelist this file?');
    if (!tmp) {
      return;
    }

    $(this).parents('.sn-malware-filebox').slideUp(500);

    $.post(ajaxurl,{
      action: 'sn_ms_whitelist_file',
      hash: $(this).data('hash'),
      filename: $(this).data('filename'),
      _ajax_nonce: wf_sn_ms_nonce
    },
    function(){
    },
    'json'
    );
  }); // whitelist files





  // delete file
  $('#sn_ms_results').on('click', 'button.sn_ms_delete', function(e){
    e.preventDefault();

    let tmp = confirm('Are you sure you want to delete this file?\n\n There is NO undo!\n\nThis can break functionality or your site from functioning. Use only if you know what you are doing :-)' + $(this).data('filename'));
    if (!tmp) {
      return;
    }

    let button = this;

    $.post(ajaxurl,
     {action: 'sn_ms_delete_file', filename: $(this).data('filename'), hash: $(this).data('hash'), _ajax_nonce: wf_sn_ms_nonce},
     function(response){
       if (typeof response.success == 'undefined') {
         alert('Undocumented error. File was not deleted. Please reload the page.');
       } else if (response.success == true) {
         alert('File deleted!');
         $(button).parents('.sn-malware-filebox').slideUp(500);
       } else {
         alert('Your file access properties do not allow us to delete the file (this is not a bad thing). Please delete it manually, via FTP.');
       }
     },
     'json'
     );
  }); // Delete a file




} // ShieldAgainstThirdPartyErrors()




// First shot.
// If no error happened, when DOMContentLoaded is triggered, this code is executed.
jQuery(ShieldAgainstThirdPartyErrors);

// Backup shot.
// If third party script throw or provoke an unhandled exception, the above function
// call could never be executed, so, lets catch the exception and execute the code.

window.onerror = function (msg, url, lineNo, columnNo, error) {
  console.error('Error detected: "'+error+'" File:'+url+' Line:'+lineNo+' Column:'+columnNo);
//  console.log('Above error was blocking');
ShieldAgainstThirdPartyErrors(jQuery);
return true;
}



jQuery(document).ready(function(){
  // toggle file info details

//jQuery(ShieldAgainstThirdPartyErrors);




// * Updates the scan results
// DEACTIVATED FOR NOW - Using minute:second counter instead
/*
function update_scan_status(){
  return $.ajax({
    type: 'POST',
    url: ajaxurl,
    data: {
      action: 'sn_ms_get_scan_status',
      _ajax_nonce: wf_sn_ms_nonce
    },
    dataType: 'json',
    success: function(response) {

      if (typeof response.data.files_scanned !== 'undefined') {
        jQuery('#scanstatus').slideDown();
        jQuery('#scanstatus #directories').html(response.data.directories);
        jQuery('#scanstatus #files_scanned').html(response.data.files_scanned);
        jQuery('#scanstatus #last_processed_dir').html(response.data.last_processed_dir);
      }
      regularupdate = setTimeout(function(){
        update_scan_status();
      }, 3000);

      }, // success
      error: function(response){
        alert('An undocumented error has occured. Please reload the page and try again.');
      } // error
    });
  }
  */




}); // document.ready