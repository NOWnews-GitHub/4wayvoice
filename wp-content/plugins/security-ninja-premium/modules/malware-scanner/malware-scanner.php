<?php
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

define( 'WF_SN_MS_OPTIONS', 'wf_sn_ms_options' );
define( 'WF_SN_MS_CACHE', 'wf_sn_ms_cache' );
define( 'WF_SN_MS_INTEGRITY_RESULTS', 'wf_sn_ms_integrity_results' );
define( 'WF_SN_MS_RESULTS', 'wf_sn_ms_results' );
define( 'WF_SN_MS_WHITELIST', 'wf_sn_ms_whitelist' );
define( 'WF_SN_MS_DELETELIST', 'wf_sn_ms_deletelist' );
define( 'WF_SN_MS_SCAN_TOTAL_TIME', 'wf_sn_ms_scan_total_time' );

define( 'WF_SN_MS_SK', 'wf_sn_ms_sk' ); // Secret key
define( 'WF_SN_MS_IV', 'wf_sn_ms_iv' ); // IV
define( 'WF_SN_MS_LAST_PATTERN_UPDATE', 'wf_sn_ms_last_pattern_update' ); // When was last updated

/*

Note - If you are curious, these values are used to encrypt the content of the files that contain small snippets of malware or footprints of known malicious code.

The pieces by themselves are innocent and cannot harm your website, but they were often detected by other website security software.

The data is collected from our API and is saved as files to reduce bloat in the database.

*/

class Wf_Sn_Ms {

	public static function get_whitelist() {
		// @todo - allow custom exclude rules - via filter in main plugin?
		$internal_whitelist = array(
			'/js_composer/vc_classmap.json.php',
			'/plugins/pretty-link/pro/',
			'/Divi/includes/builder/frontend-builder/helpers.php',
			'/wp-snapshots/',
			'/plugins/jetpack/',
			'/uploads/backupbuddy_temp/',
			'/uploads/pb_backupbuddy/',
			'/plugins/security-ninja/',
			'/plugins/security-ninja-premium/',
			'/plugins/seo-booster-premium/',
			'/plugins/backupbuddy/',
			'/plugins/wp-spamshield/',
			'/plugins/login-ninja/',
			'/plugins/gravityforms/gravityforms.php',
			'/plugins/5sec-google-authenticator/',
			'/plugins/google-maps-widget/',
			'/plugins/optin-ninja/',
			'/plugins/smartmonitor/',
			'/plugins/under-construction-page/',
			'/plugins/profit_builder/',
			'/plugins/leadsflow-pro/',
			'/wflogs/',
			'/themes/enfold/includes/admin/demo_files/',
			'/freemius/templates/secure-https-header.php',
			'/themes/enfold/includes/admin/demo_files/',
			'/themes/enfold/css/dynamic-css.php',
			'/tcpdf/tcpdf_barcodes_1d.php',
			'/plugins/wp-seo-keyword-optimizer-premium/classes/class.import.php',
			'/phpseclib/Crypt/',
			'/guzzle/src/',
			'/dompdf/lib/fonts/',
			'/plugins/wp-seo-keyword-optimizer-premium/admin/controller/controller.php',
		);

		return $internal_whitelist;
	}



	/**
	 * Schedule cron jobs
	 * @return null
	 */
	public static function schedule_cron_jobs() {
		// Update GEOIP database - once a month
		if ( ! wp_next_scheduled( 'secnin_update_samples' ) ) {
			wp_schedule_event( time(), 'monthly', 'secnin_update_samples' );
		}
	}



	/**
	 * Encrypt and decrypt - Modified
	 * Stores both key and IV in options table - no further need for hiding details.
	 *
	 * @author Nazmul Ahsan <n.mukto@gmail.com>
	 * @link
	 *
	 * @param string $string string to be encrypted/decrypted
	 * @param string $action what to do with this? e for encrypt, d for decrypt
	 */
	public static function string_crypt( $string, $action = 'e' ) {

		$wf_sn_ms_sk = get_option( WF_SN_MS_SK, false );
		if ( ! $wf_sn_ms_sk ) {
			$wf_sn_ms_sk = base64_encode( openssl_random_pseudo_bytes( 32 ) );
			update_option( WF_SN_MS_SK, $wf_sn_ms_sk );
		}

		$wf_sn_ms_iv = get_option( WF_SN_MS_IV, false );
		if ( ! $wf_sn_ms_iv ) {
			$wf_sn_ms_iv = openssl_random_pseudo_bytes( openssl_cipher_iv_length( 'aes-256-cbc' ) );
			$wf_sn_ms_iv = substr( hash( 'sha256', $wf_sn_ms_iv ), 0, 16 );
			update_option( WF_SN_MS_IV, $wf_sn_ms_iv );
		}

		$output = false;

		if ( 'e' === $action ) {
			$output = base64_encode( openssl_encrypt( $string, 'aes-256-cbc', $wf_sn_ms_sk, 0, $wf_sn_ms_iv ) ); //phpcs:ignore WordPress.PHP.DiscouragedPHPFunctions.obfuscation_base64_encode
		} elseif ( 'd' === $action ) {
			$output = openssl_decrypt( base64_decode( $string ), 'aes-256-cbc', $wf_sn_ms_sk, 0, $wf_sn_ms_iv ); //phpcs:ignore WordPress.PHP.DiscouragedPHPFunctions.obfuscation_base64_decode
		}

		return $output;
	}





	/**
	 * Returns status of scan stored in an option
	 * @return nothing
	 */
	public static function get_scan_status() {
		check_ajax_referer( 'sn_ms' );
		$wf_sn_ms_results = get_option( WF_SN_MS_RESULTS );
		if ( isset( $wf_sn_ms_results['do_mal_scan'] ) ) {
			wp_send_json_success( $wf_sn_ms_results['do_mal_scan'] );
		} else {
			wp_send_json_error( __( 'No results', 'security-ninja' ) );
		}
		return false;
	}



	/** Gets sample files first time or updates local sample files */
	public static function get_or_update_samples() {
		// Checks if updated recently and bails if so.
		$last_update = get_option( WF_SN_MS_LAST_PATTERN_UPDATE );
		if ( $last_update ) {
			$current_time = time();
			$seconds_diff = $current_time - $last_update;
			if ( $seconds_diff < DAY_IN_SECONDS ) {
				return true;
			}
		}

		$api_url = 'https://wpsecurityninja.sfo2.cdn.digitaloceanspaces.com/samples.json'; // https://wpsecurityninja.com/api/snplugin/v1/samples/
		global $secnin_fs;
		// Cannot run this code without being registered, so we parse the public_key as a simple identifier.
		$publickey = $secnin_fs->get_user()->public_key;

		if ( ! $publickey ) {
			return false;
		}

		$request_url = add_query_arg( 'pk', $publickey, $api_url );
		$request_url = add_query_arg( 'ver', wf_sn::$version, $request_url );

		$request = wp_remote_get( $request_url );

		if ( is_wp_error( $request ) ) {
			return false; // Bail early @todo - log reason
		}

		$body = wp_remote_retrieve_body( $request );

		$data = json_decode( $body );

		if ( ! empty( $data ) ) {

			if ( ( isset( $data->code ) ) && ( 'rate_limit_exceeded' === $data->code ) ) {
				return false;
			} else {

				global $wp_filesystem;
				if ( empty( $wp_filesystem ) ) {
					require_once ABSPATH . '/wp-admin/includes/file.php';
					WP_Filesystem();
				}
				$upload_dir            = wp_upload_dir();
				$secninja_upload_dir   = $upload_dir['basedir'] . '/security-ninja/';
				$patternsfoldername    = $secninja_upload_dir . 'base64_patterns/';
				$definitionsfoldername = $secninja_upload_dir . 'definitions/';

				$wp_filesystem->mkdir( $patternsfoldername );
				$wp_filesystem->mkdir( $definitionsfoldername );
				$upload_dir = wp_upload_dir();
				// cleanup old .txt files

				$oldfile = $secninja_upload_dir . 'base64_patterns/php_functions.txt';
				if ( file_exists( $oldfile ) ) {
					unlink( $oldfile );
				}
				$oldfile = $secninja_upload_dir . 'base64_patterns/php_keywords.txt';
				if ( file_exists( $oldfile ) ) {
					unlink( $oldfile );
				}
				$oldfile = $secninja_upload_dir . 'definitions/patterns_iraw.txt';
				if ( file_exists( $oldfile ) ) {
					unlink( $oldfile );
				}
				$oldfile = $secninja_upload_dir . 'definitions/patterns_raw.txt';
				if ( file_exists( $oldfile ) ) {
					unlink( $oldfile );
				}
				$oldfile = $secninja_upload_dir . 'definitions/patterns_re.txt';
				if ( file_exists( $oldfile ) ) {
					unlink( $oldfile );
				}

				# Just to make sure the log db table is created.
				wf_sn_el_modules::activate();

				if ( isset( $data->php_functions ) ) {
					$logfile = $patternsfoldername . 'php_functions.dat';
					if ( ! $wp_filesystem->put_contents( $logfile, self::string_crypt( $data->php_functions, 'e' ), FS_CHMOD_FILE ) ) {
						wf_sn_el_modules::log_event( 'security_ninja', 'malware_scanner_definitions_error', 'Problem storing the php_functions.dat file.', '' );
					}
				}

				if ( isset( $data->php_keywords ) ) {
					$logfile = $patternsfoldername . 'php_keywords.dat';
					if ( ! $wp_filesystem->put_contents( $logfile, self::string_crypt( $data->php_keywords, 'e' ), FS_CHMOD_FILE ) ) {
						wf_sn_el_modules::log_event( 'security_ninja', 'malware_scanner_definitions_error', 'Problem storing the php_keywords.dat file.', '' );
					}
				}

				// PATTERNS
				if ( isset( $data->patterns_iraw ) ) {
					$logfile = $definitionsfoldername . 'patterns_iraw.dat';
					if ( ! $wp_filesystem->put_contents( $logfile, self::string_crypt( $data->patterns_iraw, 'e' ), FS_CHMOD_FILE ) ) {
						wf_sn_el_modules::log_event( 'security_ninja', 'malware_scanner_definitions_error', 'Problem storing the patterns_iraw.dat file.', '' );
					}
				}

				if ( isset( $data->patterns_raw ) ) {
					$logfile = $definitionsfoldername . 'patterns_raw.dat';
					if ( ! $wp_filesystem->put_contents( $logfile, self::string_crypt( $data->patterns_raw, 'e' ), FS_CHMOD_FILE ) ) {
						wf_sn_el_modules::log_event( 'security_ninja', 'malware_scanner_definitions_error', 'Problem storing the patterns_raw.dat file.', '' );
					}
				}

				if ( isset( $data->patterns_re ) ) {
					$logfile = $definitionsfoldername . 'patterns_re.dat';
					if ( ! $wp_filesystem->put_contents( $logfile, self::string_crypt( $data->patterns_re, 'e' ), FS_CHMOD_FILE ) ) {
						wf_sn_el_modules::log_event( 'security_ninja', 'malware_scanner_definitions_error', 'Problem storing the patterns_re.dat file.', '' );
					}
				}

				$last_update = time();
				update_option( WF_SN_MS_LAST_PATTERN_UPDATE, $last_update );
			}
		} else {
			// removes the last update to force routine to update again.
			delete_option( WF_SN_MS_LAST_PATTERN_UPDATE );
			wf_sn_el_modules::log_event( 'security_ninja', 'malware_scanner_definitions_error', 'Error downloading the malware and virus definitions from API.', '' );
		}
	}


	// init plugin
	public static function init() {
		// does the user have enough privilages to use the plugin?
		if ( is_admin() ) {
			// add tab to Security Ninja tabs
			add_filter( 'sn_tabs', array( __CLASS__, 'sn_tabs' ) );

			add_action( 'secnin_update_samples', array( __CLASS__, 'get_or_update_samples' ) );

			add_action( 'init', array( __CLASS__, 'schedule_cron_jobs' ) );
			// enqueue scripts
			add_action( 'admin_enqueue_scripts', array( __CLASS__, 'enqueue_scripts' ) );

			add_action( 'wp_ajax_sn_ms_run_scan', array( __CLASS__, 'run_scan' ) );
			add_action( 'wp_ajax_sn_ms_whitelist_file', array( __CLASS__, 'add_whitelisted_file' ) );
			add_action( 'wp_ajax_sn_ms_reset_whitelist', array( __CLASS__, 'reset_whitelist' ) );
			add_action( 'wp_ajax_sn_ms_delete_file', array( __CLASS__, 'delete_file' ) );
			// warn if tests were never run
			add_action( 'admin_notices', array( __CLASS__, 'warnings' ) );

			// add custom text for GUI overlay
			add_action( 'sn_overlay_content', array( __CLASS__, 'overlay_content' ) );

		}
	}

	/*
	* Enqueue CSS and JS scripts on plugin's admin page
	* @return void
	*/
	public static function enqueue_scripts() {
		if ( wf_sn::is_plugin_page() ) {
			$plugin_url = plugin_dir_url( __FILE__ );

			wp_enqueue_script( 'sn-ms-js', $plugin_url . 'js/wf-sn-ms-min.js', array( 'jquery' ), wf_sn::$version, true );

			wp_localize_script( 'jquery', 'wf_sn_ms_nonce', wp_create_nonce( 'sn_ms' ) );
		} // if
	} // enqueue_scripts

	// add new tab
	public static function sn_tabs( $tabs ) {
		$core_tab = array(
			'id'       => 'sn_malware',
			'class'    => '',
			'label'    => __( 'Malware', 'security-ninja' ),
			'callback' => array( __CLASS__, 'malware_page' ),
		);
		$done     = 0;

		for ( $i = 0; $i < count( $tabs ); $i++ ) {
			if ( 'sn_malware' === $tabs[ $i ]['id'] ) {
				$tabs[ $i ] = $core_tab;
				$done       = 1;
				break;
			}
		} // for

		if ( ! $done ) {
			$tabs[] = $core_tab;
		}

		return $tabs;
	} // sn_tabs

	// @todo - add function with file types to ignore
	// add custom message to overlay
	public static function overlay_content() {
		echo '<div id="sn-malware-scanner" style="display: none;">';
		echo '<h3>Scanning your website for malware</h3>';
		echo '<p>Depending on the size of your website this can take several minutes.</p>';

		$wf_sn_ms_scan_total_time = get_option( WF_SN_MS_SCAN_TOTAL_TIME );

		echo '<p><label id="mscounterminutes">00</label>:<label id="mscounterseconds">00</label></p>';

		echo '<ul class="malware-scan-list"></ul>';

		$infolink = wf_sn::generate_sn_web_link( 'malscan-overlay', '/docs/malware-scanner/' );

		if ( ! wf_sn_wl::is_active() ) {
			echo '<p><small>Wondering what is happening? <a href="' . esc_url( $infolink ) . '" target="_blank">Click here</a> (opens a new window)</small></p>';
		}

		if ( isset( $wf_sn_ms_scan_total_time ) ) {
			$total_scan_time = $wf_sn_ms_scan_total_time;
			if ( $total_scan_time ) {
				$spenttime = self::seconds2human( $total_scan_time );
				echo '<p><small>' . sprintf( esc_html__( 'Your last malware scan took %s ', 'security-ninja' ), $spenttime ) . '</small></p>';
			}
		}
		echo '</div><!-- #sn-malware-scanner -->';
	} // overlay_content

	// generate a list of files to scan in a folder
	public static function scan_folder( $path, $extensions = null, $depth = 3, $relative_path = '' ) {
		if ( ! is_dir( $path ) ) {
			return false;
		}

		if ( $extensions ) {
			$extensions  = (array) $extensions;
			$_extensions = implode( '|', $extensions );
		} else {
			$extensions  = array(); // empty array to find all types of files.
			$_extensions = implode( '|', $extensions );
		}

		$relative_path = trailingslashit( $relative_path );
		if ( '/' === $relative_path ) {
			$relative_path = '';
		}

		$results = scandir( $path );
		$files   = array();

		foreach ( $results as $result ) {
			if ( '.' === $result[0] ) {
				continue;
			}

			if ( is_dir( $path . '/' . $result ) ) {
				if ( ! $depth || 'CVS' === $result ) {
					continue;
				}
				$found = self::scan_folder( $path . '/' . $result, $extensions, $depth - 1, $relative_path . $result );
				$files = array_merge_recursive( $files, $found );
			} elseif ( ! $extensions || preg_match( '~\.(' . $_extensions . ')$~', $result ) ) {
				$files[ $relative_path . $result ] = $path . '/' . $result;
			}
		} // foreach result

		return $files;
	} // scan_folder

	// generate a list of folders within a folder to scan
	public static function get_folders( $parent_folder, $skip = null ) {
		if ( ! $parent_folder ) {
			return array();
		}

		$folders = glob( trailingslashit( $parent_folder ) . '*', GLOB_ONLYDIR );

		if ( isset( $skip ) && count( $folders ) ) {
			$tmp     = count( $folders );
			$cleaned = array();
			$skip    = (array) $skip;
			for ( $i = 0; $i < $tmp; $i++ ) {
				$filtered = false;
				foreach ( $skip as $pattern ) {
					if ( stripos( $folders[ $i ], $pattern ) !== false ) {
						$filtered = true;
					}
				} // foreach skip
				if ( ! $filtered ) {
					$cleaned[] = $folders[ $i ];
				}
			} // for folders
			$folders = $cleaned;
		} // if skip

		if ( ! $folders ) {
			return array();
		} else {
			return $folders;
		}
	} // get_folders

	public static function update_cache( $data, $key = null ) {
		if ( ! isset( $key ) ) {
			$cache = $data;
		} else {
			$cache         = get_option( WF_SN_MS_CACHE );
			$cache[ $key ] = $data;
		}

		return update_option( WF_SN_MS_CACHE, $cache );
	}

	// retreive cached data
	public static function get_cache( $key = null ) {
		$cache = get_option( WF_SN_MS_CACHE );

		if ( isset( $key ) && isset( $cache[ $key ] ) ) {
			return $cache[ $key ];
		} elseif ( isset( $key ) ) {
			return array();
		} else {
			return $cache;
		}
	} // get_cache

	// save results data
	public static function update_results( $data, $key = null ) {
		if ( ! isset( $key ) ) {
			$cache = $data;
		} else {
			$cache         = get_option( WF_SN_MS_RESULTS );
			$cache[ $key ] = $data;
		}
		$cache['last_run'] = time();

		return update_option( WF_SN_MS_RESULTS, $cache );
	} // update_results

	// retreive results data
	public static function get_results( $key = null ) {
		$cache = get_option( WF_SN_MS_RESULTS );

		if ( isset( $key ) && isset( $cache[ $key ] ) ) {
			return $cache[ $key ];
		} elseif ( isset( $key ) ) {
			return array();
		} else {
			return $cache;
		}
	} // get_cache

	// add file hash to whitelist
	public static function add_whitelisted_file() {
		check_ajax_referer( 'sn_ms' );
		$whitelist = get_option( WF_SN_MS_WHITELIST, array() );

		if ( isset( $_POST['hash'] ) && isset( $_POST['filename'] ) ) {
			$new         = array(
				'hash'     => esc_attr( @$_POST['hash'] ), // @todo @sec
				'filename' => esc_attr( @$_POST['filename'] ), // @todo sec
			);
			$whitelist[] = $new;
			update_option( WF_SN_MS_WHITELIST, $whitelist );
			wp_send_json_success();
		}
	}

	// remove all files from user created whitelist
	public static function reset_whitelist() {
		check_ajax_referer( 'sn_ms' );

		update_option( WF_SN_MS_WHITELIST, array() );

		wp_send_json_success();
	} // reset_whitelist

	public static function format_results_cont() {
		$out = '';
		$cnt = 0;

		$malscan       = self::get_results( 'do_mal_scan' );
		$integrityscan = self::get_results( 'do_integrity_scan' );

		if ( isset( $integrityscan['modified_files'] ) && is_array( $integrityscan['modified_files'] ) ) {
			if ( count( $integrityscan['modified_files'] ) > 0 ) {

				$haveoutput = false;
				foreach ( $integrityscan['modified_files'] as $key => $is ) {

					$filelist = $is['files'];

					$comment = '';
					if ( is_array( $filelist ) ) {

						if ( ! isset( $is['Path'] ) ) {
							$is['Path'] = '';
						}

						foreach ( $filelist as $fi ) {

							$filename = $is['Path'] . $fi;
							$filehash = @md5_file( $filename );

							if ( ! self::in_whitelist( $filename, $filehash ) ) {
								if ( ! $haveoutput ) {
									$out       .= '<h3>Modified Plugin Files</h3>'; // @i8n
									$haveoutput = true;
								}
								$out .= self::format_result_line(
									$is['Name'] . ' ' . $fi,
									$filename,
									$filehash,
									$comment,
									null,
									null,
									false,
									true,
									true,
									$filename
								);
								$cnt++;
							}
						}
					}
				}
			}
		}

		/* UNKNOWN FILES */

		if ( isset( $integrityscan['unknown_files'] ) && is_array( $integrityscan['unknown_files'] ) ) {
			if ( count( $integrityscan['unknown_files'] ) > 0 ) {
				$haveoutput = false;
				foreach ( $integrityscan['unknown_files'] as $key => $is ) {

					$filelist = $is['files'];

					$comment = '';
					if ( is_array( $filelist ) ) {

						if ( ! isset( $is['Path'] ) ) {
							$is['Path'] = '';
						}

						foreach ( $filelist as $fi ) {

							$filename = $fi;

							$filehash = @md5_file( $fi );

							if ( ! self::in_whitelist( $fi, $filehash ) ) {

								if ( ! $haveoutput ) {
									$out       .= '<h3>Unknown Files</h3>'; // @i8n
									$haveoutput = true;
								}
								$out .= self::format_result_line(
									$is['Name'],
									$fi,
									$filehash,
									$comment,
									null,
									null,
									false,
									true,
									true,
									$fi
								);
								$cnt++;
							}
						}
					}
				}
			}
		}

		if ( isset( $malscan['files'] ) ) {
			$out .= '<h3>Signs of suspicious or malicious code</h3>';
			$out .= self::format_results( $malscan['files'] );
			$cnt += count( $malscan['files'] );
		}

		if ( defined( 'DOING_AJAX' ) && DOING_AJAX ) {
			do_action( 'security_ninja_malware_scanner_done_scanning', $cnt );
		}

		if ( $out ) {
			$out = '<h3 class="error">' . sprintf( esc_html( _n( '%d suspicious file found', '%d issues found', $cnt, 'security-ninja' ) ), $cnt ) . '</h3>' . $out;

		} else {

			$last_run = self::get_results( 'last_run' );

			if ( isset( $last_run ) && $last_run ) {

				$out .= '<h3>Great! There are no suspicious files to report at the moment</h3>';
			}
		}

		return $out;
	}

	// delete file via ajax
	public static function delete_file() {
		check_ajax_referer( 'sn_ms' );

		$file = @$_POST['filename'];
		$hash = trim( @$_POST['hash'] );
		if ( filter_var( $file, FILTER_SANITIZE_URL ) !== $file ) {
			die( '-1' );
		}

		if ( $hash !== @md5_file( $file ) ) {
			die( '-1' );
		}

		if ( @unlink( $file ) ) {
			$deletelist   = get_option( WF_SN_MS_DELETELIST, array() );
			$deletelist[] = $hash;
			$deletelist   = array_unique( $deletelist );
			update_option( WF_SN_MS_DELETELIST, $deletelist );
			wp_send_json_success();
		} else {
			wp_send_json_error();
		}
	} // delete_file

	// ajax function for running scan
	public static function run_scan( $opt = false ) {

		if ( defined( 'DOING_AJAX' ) && DOING_AJAX ) {
			check_ajax_referer( 'sn_ms' );
		}

		$out['err'] = '';
		if ( ! $opt ) {
			$opt = trim( @$_POST['what'] );
		}

		// @todo - med respons
		switch ( $opt ) {
			// First time - So lets start
			case 'clean_cache':
				wf_sn::timerstart( 'WF_SN_MS_SCAN' );
				self::update_cache( array() );
				self::update_results( array() );
				delete_option( WF_SN_MS_DELETELIST );
				break;

			case 'update_samples':
				// Make sure we have the files as base for scanning
				$updateSamples = self::get_or_update_samples();

				break;

			case 'get_db_rows':
				global $wpdb;

				$query = $wpdb->prepare( 'SELECT COUNT(option_id) FROM ' . $wpdb->options . ' WHERE option_name NOT LIKE %s', '\_%' );
				$cnt   = $wpdb->get_var( $query );

				$out['cnt'] = $cnt;
				break;

			case 'do_integrity_scan':
				$integrity_results = wf_sn_plugins_integrity::runInternal();
				if ( $integrity_results ) {
					self::update_results( $integrity_results, 'do_integrity_scan' );
				}
				$out['msg'] = 'Scan completed';

				break;

			case 'do_mal_scan':
				require_once WF_SN_PLUGIN_DIR . 'misc/php-malware-scanner/sn-scan.php';
				$malscan = new MalwareScanner( false );
				$malscan->setFlagHideOk( true );
				$malscan->setFlagComments( true );
				$malscan->setFlagHideWhitelist( true );
				$malscan->setFlagNoStop( false );
				$malscan->setFlagLineNumber( true );

				$integrity_whitelist = array();
				$integrity_results   = self::get_results( 'do_integrity_scan' );
				if ( $integrity_results ) {
					if ( is_array( $integrity_results['validated_plugins'] ) ) {
						foreach ( $integrity_results['validated_plugins'] as $key => $valid_dir ) {
							$integrity_whitelist[] = str_replace( ABSPATH, '', $valid_dir['Path'] );
						}
					}
				}

				$custom_whitelist = get_option( WF_SN_MS_WHITELIST, array() );

				$merged_whitelist = array_merge( self::get_whitelist(), $custom_whitelist, $integrity_whitelist );

				// @todo - add to the custom whitelist from the integrity results..
				$malscan->setIgnore( $merged_whitelist );

				$scanresults = $malscan->do_scan( ABSPATH ); // WF_SN_PLUGIN_DIR WP_PLUGIN_DIR WP_CONTENT_DIR // ABS_PATH
				if ( $scanresults ) {
					self::update_results( $scanresults, 'do_mal_scan' );
				}

				break;
			case 'get_db_rows':
				global $wpdb;

				$query = $wpdb->prepare( 'SELECT COUNT(option_id) FROM ' . $wpdb->options . ' WHERE option_name NOT LIKE %s', '\_%' );
				$cnt   = $wpdb->get_var( $query );

				$out['cnt'] = $cnt;
				break;

			case 'scan_db':
				$results = self::scan_db();
				self::update_results( $results, 'db_options' );
				$out['cnt'] = count( $results );
				break;

			case 'get_results':
				$out = self::format_results_cont();
				// Gets and saves the total scan time as an option
				update_option( WF_SN_MS_SCAN_TOTAL_TIME, wf_sn::timerstop( 'WF_SN_MS_SCAN' ) );
				break;
			default:
				wp_send_json_error( __( 'Invalid option.', 'security-ninja' ) );
		}

		if ( defined( 'DOING_AJAX' ) && DOING_AJAX ) {
			wp_send_json_success( $out );
		} else {
			return $out;
		}
	} // run_scan

	// scan provided list of files, mind the whitelist
	static function process_files( $files ) {
		$tmp     = 0;
		$results = array();
		$files   = array_slice( $files, 0, 500 );
		foreach ( $files as $file ) {
			$hash = @md5_file( $file );
			if ( self::in_whitelist( $file, $hash ) ) {
				continue;
			}
			// check if in list of ignored file extensions
			if ( self::in_ignored_file_extensions( $file ) ) {
				continue;
			}
			$result = self::scan_file( $file );
			if ( $result ) {
				$results[] = array(
					'filename' => $file,
					'hash'     => $hash,
					'lines'    => $result,
				);
			}
		}
		return $results;
	}

	public static function in_ignored_file_extensions( $file = false ) {
		if ( ! $file ) {
			return false;
		}

		$ignored_extensions = self::get_ignored_file_extensions();
		if ( ! $ignored_extensions ) {
			return false;
		}

		$ext = pathinfo( $file, PATHINFO_EXTENSION );
		if ( in_array( $ext, $ignored_extensions, true ) ) {
			return true;
		}
		return false;
	}

	// check if file is in whitelist, user or global one
	public static function in_whitelist( $filename, $hash ) {
		$whitelist  = get_option( WF_SN_MS_WHITELIST, array() );
		$deletelist = get_option( WF_SN_MS_DELETELIST, array() );

		// Tests if file is in whitelist
		if ( in_array( $hash, $whitelist ) !== false ) {
			return true;
		}

		// Tests if in list of files to delete
		if ( in_array( $hash, $deletelist ) !== false ) {
			return true;
		}

		// Tests against known folder names to ignore
		foreach ( self::get_whitelist() as $pattern ) {
			if ( fnmatch( $pattern, strtolower( $filename ) ) ) {
				return true;
			}
		} // foreach internal whitelist

		// Checks against manually whitelisted files
		$whitelist = get_option( WF_SN_MS_WHITELIST, array() );
		foreach ( $whitelist as $wl ) {
			if ( $wl['filename'] === $filename ) {
				return true;
			}
		}
		return false;
	}

	/**
	 * Returns a formatted line in malware results
	 * @param  [type]  $title         [description]
	 * @param  [type]  $path          [description]
	 * @param  [type]  $hash          [description]
	 * @param  [type]  $comment       [description]
	 * @param  [type]  $matchedline   [description]
	 * @param  [type]  $line          [description]
	 * @param  [type]  $pattern       [description]
	 * @param  boolean $delete_btn    [description]
	 * @param  boolean $whitelist_btn [description]
	 * @param  [type]  $files         [description]
	 * @return [type]                 [description]
	 */
	public static function format_result_line( $title, $path, $hash, $comment = null, $matchedline = null, $line = null, $pattern = null, $delete_btn = false, $whitelist_btn = false, $files = null ) {

		$out  = '<div class="sn-malware-filebox">';
		$out .= '<div class="sn-malware-title">';
		$out .= '<div class="sn-malware-title-inner">';
		$out .= '<span>' . $title . '</span> <a href="#" class="toggle-slide"><div class="dashicons-before dashicons-arrow-up-alt2"></div></a>';

		if ( $delete_btn ) {
			$out .= '<button class="input-button sn_ms_delete" data-filename="' . $path . '" data-hash="' . $hash . '">' . __( 'Delete', 'security-ninja' ) . '</button>';
		}

		if ( $whitelist_btn ) {
			$out .= '<button class="input-button gray sn_ms_whitelist" data-hash="' . $hash . '" data-filename="' . $path . '">' . __( 'Whitelist', 'security-ninja' ) . '</button>';
		}

		$out .= '</div>';
		$out .= '</div>';

		$out .= '<div class="sn-malware-file-code closed">';
		if ( isset( $matchedline ) ) {
			$out .= '<div class="matchedline"><code>' . esc_html( $matchedline ) . '</code></div>';
		}
		if ( isset( $line ) ) {
			$out .= '<div class="linenumber">Line: ' . esc_html( $line ) . '</div>';
		}

		if ( isset( $pattern ) ) {
			$out .= '<div class="pattern">' . esc_html( $pattern ) . '</div>';
		}

		// @todo - not working?
		if ( is_array( $files ) ) {

			$out .= '<div class="files"><ul>';
			foreach ( $files as $fil ) {
				$out .= '<li>' . $fil . '</li>';
			}
			$out .= '</ul></div>';
		}

		if ( $comment ) {
			$out .= '<div class="comment">' . $comment . '</div>';
		}

		if ( $path ) {
			$out .= '<div class="path">Located here: <code>' . esc_html( $path ) . '</code></div>';
		}
		$out .= '</div>';

		$out .= '</div>';
		return $out;
	}

	public static function format_results( $files ) {
		$out = '';

		if ( ! $files ) {
			return '';
		}

		$whitelist = get_option( WF_SN_MS_WHITELIST, array() );

		foreach ( $files as $file ) {

			if ( ! isset( $file['path'] ) ) {
				$file['path'] = $file['path'];
			}

			if ( ! self::in_whitelist( $file['path'], $file['hash'] ) ) {

				/**
				 * Returns a formatted line in malware results
				 * @param  [type] $title        [description]
				 * @param  [type] $path        [description]
				 * @param  [type] $hash        [description]
				 * @param  [type] $comment     [description]
				 * @param  [type] $matchedline [description]
				 * @param  [type] $line        [description]
				 * @param  [type] $pattern     [description]
				 * @param  [type] $delete_btn     [description]
				 * @param  [type] $whitelist_btn     [description]
				 *
				 * @return [type] STRING       [description]
				 */
				$out .= self::format_result_line( str_replace( ABSPATH, '', $file['path'] ), $file['path'], $file['hash'], $file['comment'], $file['matchedline'], $file['line'], $file['pattern'], true, true );

			} else {
				// No output better than too much. File is listed down below anyways...
					//	$out .= '<p class="whitelisted"><span>'.$file['path'].'</span> '.__('is whitelisted', 'security-ninja').'</p>';
			}
		}

		return $out;
	}

	// prepare results for output
	public static function format_db_results( $options ) {
		global $wpdb;
		$out = '';

		if ( ! $options ) {
			return '';
		}

		$out .= '<div class="sn-malware-filebox">';
		$out .= '<div class="sn-malware-title">';
		$out .= '<div class="sn-malware-title-inner">';
		$out .= '<span>' . __( 'Database table', 'security-ninja' ) . ' ' . DB_NAME . '.' . $wpdb->options . '</span> <a href="#" class="toggle-slide"><div class="dashicons-before dashicons-arrow-up-alt2"></div></a><br>';
		$out .= '</div>';
		$out .= '</div>';
		$out .= '<div class="sn-malware-file-code closed">';
		foreach ( $options as $key => $result ) {
			$result = htmlspecialchars( $result );
			$result = str_replace( array( '@span@', '@/span@' ), array( '<span class="sn_ms_highlight">', '</span>' ), $result );
			$out   .= '<div class="one-line">';
			$out   .= '<span class="line-number">' . $key . '</span> <p>' . $result . '</p>';
			$out   .= '</div>';
		} // foreach line
		$out .= '</div>';
		$out .= '</div>';

		return $out;
	} // format_db_results

	// generate regular expression for malware search
	public static function line_match_pattern( $filetype = 'php' ) {
		// Match whole words only
		$php = '/[\n\r\s\,](assert|file_get_contents|curl_exec|popen|proc_open|unserialize|eval|base64_encode|base64_decode|create_function|exec|shell_exec|system|passthru|ob_get_contents|file|curl_init|readfile|fopen|fsockopen|pfsockopen|fclose|fread|file_put_contents)\s*?\(/';
		return $php;
		// @todo - add js detection rules
	} // line_match_pattern

	// scan individual file
	public static function scan_file( $file ) {
		if ( filter_var( $file, FILTER_SANITIZE_URL ) !== $file || ! $file || ! $content = file( $file ) ) {
			return false;
		}

		$results = array();

		foreach ( $content as $num => $line ) {
			if ( $result = self::scan_file_line( $line, $num ) ) {
				$results[ $num ] = $result;
			}
		}

		if ( ! empty( $results ) ) {
			return $results;
		}

		return false;
	} // scan_file

	public static function get_ignored_file_extensions() {
		// for now ignoring js files
		$ignored_extensions = array(
			'mo',
			'po',
			'md',
			'png',
			'gif',
			'md',
			'pot',
			'css',
			'js',
			'woff',
			'woff2',
			'xml',
			'eot',
			'ttf',
			'svg',
		);
		// @todo - apply_filter
		return $ignored_extensions;
	}

	/** Returns an array of option_names to be skipped in database scan */
	public static function get_whitelisted_option_names() {
		$oknames = array(
			'wf_sn_ms_results', // lk - internal storing scan results
			'fs_accounts', // lk freemius
			'fs_api_cache', // lk freemius
			'jetpack_protect_key', // lk
			'mwp_public_keys', // lk managewp
		);

		// @todo - add extra whitelisted option names from user settings
		return $oknames;
	}

	// scans all option and transient strings in db.options
	public static function scan_db() {
		global $wpdb;
		$out = array();

		$records = $wpdb->get_var( $wpdb->prepare( "SELECT COUNT(option_id) FROM $wpdb->options WHERE option_name NOT LIKE %s", '\_%' ) );

		$pages = round( $records / 100 ) + 1;
		$pages = max( 13, $pages );

		$whitelisted_option_names = self::get_whitelisted_option_names();

		for ( $i = 0; $i < $pages; $i++ ) {
			$query = $wpdb->get_results( $wpdb->prepare( "SELECT option_name, option_value FROM {$wpdb->options} WHERE option_name  NOT LIKE %s LIMIT %d, 100", '\_%', $i * 100 ) );
			foreach ( $query as $row ) {
				if ( ! in_array( $row->option_name, $whitelisted_option_names, true ) ) {
					$result = self::scan_file_line( $row->option_value, 0, true );
					if ( $result ) {
						$out[ $row->option_name ] = $result[0];
					}
				}
			}
			unset( $query );
			wp_cache_flush();
		} // for

		return $out;
	} // scan_db_options

	/**
	 * Scan one file line
	 * @param  [type]  $line            [description]
	 * @param  [type]  $num             [description]
	 * @param  boolean $only_first_line [description]
	 * @return [type]                   [description]
	 */
	public static function scan_file_line( $line, $num, $only_first_line = false ) {
		$line = trim( (string) $line );

		if ( ! $line ) {
			return false;
		}

		$results = array();
		$output  = array();

		// matches usual patterns
		preg_match_all( self::line_match_pattern( 'php' ), $line, $matches );
		if ( $matches[1] ) {
			$results = $matches[1];
		}

		preg_match_all( '/[\'\"\$\\ \/]*?([a-zA-Z0-9]{' . strlen( base64_encode( 'rainbow + unicorn = magic.' ) ) . ',})/', $line, $matches ); // phpcs:ignore WordPress.PHP.DiscouragedPHPFunctions.obfuscation_base64_encode
		if ( $matches[1] ) {
			$results = array_merge( $results, $matches[1] );
		}

		// Looks for iframes
		preg_match_all( '/<\s*?(i?frame)/', $line, $matches );
		if ( $matches[1] ) {
			$results = array_merge( $results, $matches[1] );
		}

		/* MailPoet Vulnerability */
		preg_match_all( '/explode\s?\(chr\s?\(\s?\(\d{3}\s?-\s?\d{3}\s?\)\s?\)\s?,/', $line, $matches );
		if ( $matches[0] ) {
			$results = array_merge( $results, $matches[0] );
		}

		if ( $results ) {
			$results = array_unique( $results );

			foreach ( $results as $tag ) {
				$string   = str_replace( $tag, '@span@' . $tag . '@/span@', self::cut_line( $line, $tag ) );
				$output[] = $string;
				if ( $only_first_line ) {
					break;
				}
			} // foreach result

			return $output;
		} // if results

		return false;
	} // scan_file_line

	/**
	 * Trim code line
	 * @param  [type]  $line [description]
	 * @param  [type]  $tag  [description]
	 * @param  integer $max  [description]
	 * @return [type]        [description]
	 */
	public static function cut_line( $line, $tag, $max = 200 ) {
		if ( ! $line || ! $tag ) {
			return false;
		}

		if ( strlen( $tag ) > $max ) {
			return $tag;
		}

		$left = round( ( $max - strlen( $tag ) ) / 2 );
		$tag  = preg_quote( $tag );

		$output = preg_replace( '/(' . $tag . ')(.{' . $left . '}).{0,}$/', '$1$2 ...', $line );
		$output = preg_replace( '/^.{0,}(.{' . $left . ',})(' . $tag . ')/', '... $1$2', $output );

		return $output;
	} // cut_line

	// Based on anon submission https://snippetsofcode.wordpress.com/2012/08/25/php-function-to-convert-seconds-into-human-readable-format-months-days-hours-minutes/
	public static function seconds2human( $ss = false ) {
		if ( ! $ss ) {
			return false;
		}
		$s      = $ss % 60;
		$minraw = floor( ( $ss % 3600 ) / 60 );
		$m      = '';
		if ( $minraw > 0 ) {
			$m = sprintf( _n( '%s minute', '%s minutes', $minraw, 'security-ninja' ), esc_html( number_format_i18n( $minraw ) ) );
		}
		$hourraw = floor( ( $ss % 86400 ) / 3600 );
		$h       = '';
		if ( $hourraw > 0 ) {
			$h = sprintf( _n( '%s hour', '%s hours', $hourraw, 'security-ninja' ), number_format_i18n( $hourraw ) );
		}

		return ltrim( "$h $m $s seconds" );
	}

	/**
	 * Display results
	 * @return [type] [description]
	 */
	public static function malware_page() {

		$last_run = self::get_results( 'last_run' );

		$wf_sn_ms_scan_total_time = get_option( WF_SN_MS_SCAN_TOTAL_TIME );

		if ( isset( $wf_sn_ms_scan_total_time ) ) {

			$total_scan_time = $wf_sn_ms_scan_total_time;
		}
		echo '<div class="submit-test-container">';

		echo '<h3>' . __( 'Malware Scanner', 'security-ninja' ) . '</h3>';

		self::get_or_update_samples();

		if ( version_compare( PHP_VERSION, '7.0', '<' ) ) {
			?>
			<p><strong>
				<?php
				printf( esc_html__( 'Warning - You are running PHP v. %1$s - Malware Scanner needs PHP 7+ ', 'security-ninja' ), PHP_VERSION );
				?>
			</strong></p>
			<?php
			$infolink = wf_sn::generate_sn_web_link( 'upgrade-php', '/docs/installation-and-usage/why-upgrade-to-php-7/' );
			echo '<p>' . __( 'Why is this important?', 'security-ninja' ) . '</p><a href="' . $infolink . '" target="_blank">' . __( 'Read more about PHP 7', 'security-ninja' ) . '</a> (opens a new window)</small></p>';
			?>
			<p><a id="sn_ms_run_scan" href="#" class="button button-primary button-hero"><?php esc_html_e( 'Scan your website and plugins', 'security-ninja' ); ?></a>
			</p>
			<?php

		} else {
			?>
			<a id="sn_ms_run_scan" href="#" class="button button-primary button-hero"><?php esc_html_e( 'Scan your website', 'security-ninja' ); ?></a>
			<?php
		}

		global $secnin_fs;
		if ( ( $secnin_fs->is_registered() ) && ( ! $secnin_fs->is_pending_activation() ) && ( ! wf_sn_wl::is_active() ) ) {
			?>
			<p><a href="#" data-beacon-article="5d27cc4a042863478674d079"><?php esc_html_e( 'Need help? How to use the malware scanner.', 'security-ninja' ); ?></a></p>
			<?php
		}

		if ( isset( $last_run ) && $last_run ) {
			echo '<p class="sn-notice">' . __( 'Files were last scanned on', 'security-ninja' ) . ': ' . gmdate( get_option( 'date_format' ) . ' ' . get_option( 'time_format' ), $last_run ) . '.';

			$wf_sn_ms_results = get_option( WF_SN_MS_RESULTS );

			if ( isset( $wf_sn_ms_results['do_mal_scan'] ) ) {

				$spenttime = self::seconds2human( $total_scan_time );
				if ( $spenttime ) {
					echo ' Duration ' . esc_html( $spenttime ) . '.';
				}
			}

			if ( isset( $wf_sn_ms_results['do_mal_scan'] ) ) {
				printf( ' ' . esc_html__( 'Scanned %1$s files in %2$s directories.', 'security-ninja' ), number_format_i18n( $wf_sn_ms_results['do_mal_scan']['files_scanned'] ), number_format_i18n( $wf_sn_ms_results['do_mal_scan']['directories_scanned'] ) );
			}

			echo '</p>';
		} else {
			echo '<p>' . __( 'Depending on the size of your website this can take several minutes.', 'security-ninja' ) . '</p>';
		}
		?>


		<div id="sn_ms_results" class="testresults">
			<?php

			$scanresults = self::format_results_cont();

			if ( $scanresults ) {
				echo $scanresults;
				?>
				<div id="sn_ms_results_detailed">

					<input id="toggle" type="checkbox" style="visibility:hidden">
					<label for="toggle"><?php esc_html_e( 'Click me to see more details', 'security-ninja' ); ?></label>
					<div class="detailsboxexpand">
						<?php
						$last_results = self::get_results();

						if ( isset( $last_results['do_integrity_scan']['validated_plugins'] ) ) {
							$validated = $last_results['do_integrity_scan']['validated_plugins'];

							if ( is_array( $validated ) ) {
								?>
								<h3>Plugins validated</h3>
								<p>These plugins were compared against the info in the public repository. There were no modifications detected.</p>
								<ul class="known-public-plugins">
									<?php
									foreach ( $validated as $key => $plugin ) {
										?>
										<li><strong><?php echo $plugin['Name']; ?></strong> by <?php echo $plugin['Author']; ?> (v. <?php echo $plugin['Version']; ?>)</li>
										<?php
									}
									?>
								</ul>
								<?php
							}
						}

						if ( isset( $last_results['do_integrity_scan']['checksums_retrieval_failed'] ) ) {
							$failed = $last_results['do_integrity_scan']['checksums_retrieval_failed'];
							if ( is_array( $failed ) && ( count( $failed ) > 0 ) ) {
								?>
								<h3>Plugins not in wordpress.org repository</h3>
								<p>These plugins were not found on the public repository. Perhaps it is a premium plugin or custom made.</p>
								<p>These plugins were scanned for malware.</p>
								<ul class="unknown-public-plugins">
									<?php
									// Filters out plugin names we do not want to show up.
									$ignore_arr = array( 'Security Ninja Pro', 'Security Ninja (Premium)' );
									foreach ( $failed as $key => $plugin ) {
										if ( ! in_array( $plugin['Name'], $ignore_arr, true ) ) {
											?>
											<li><a href="<?php echo $plugin['PluginURI']; ?>" target="_blank"><?php echo $plugin['Name']; ?></a> by <?php echo $plugin['Author']; ?> v. <?php echo $plugin['Version']; ?></li>
											<?php
										}
									}
									?>
								</ul>

								<?php
							}
						}
						?>

					</div><!-- .details_box -->
				</div><!-- #sn_ms_results_detailed -->
				<?php
			} else {
				?>

				<p><?php esc_html_e( 'Click the button to run the first test.', 'security-ninja' ); ?></p>

				<?php
			}
			?>
		</div><!-- .testresults -->
		<?php
		$whitelist = get_option( WF_SN_MS_WHITELIST, array() );

		if ( $whitelist ) {
			// @todo
			?>
			<div class="whitelistcont"><h3>
				<?php
				$count = count( $whitelist );
				printf( esc_html( _n( '%d whitelisted file', '%d whitelisted files', intval( $count ), 'my-text-domain' ) ), $count );
				?>
			</h3>
			<ul class="whitelistedfiles">
				<?php

				foreach ( $whitelist as $wf ) {
					?>
					<li><?php echo str_replace( ABSPATH, '', $wf['filename'] ); ?></li>
					<?php
				}
				?>
			</ul>
			<p>
				<?php
				_e( 'These files are ignored from scans.', 'security-ninja' );
				?>
			</p>
			<?php
			echo '<a href="#" id="sn-ms-reset-whitelist" class="button button-secondary">' . __( 'Reset whitelisted files', 'security-ninja' ) . '</a>';
			?>
		</div>
			<?php
		} else {
			// no whitelisted files
		}
		?>
	<p class="description"><?php esc_html_e( 'Files are scanned using a heuristic analysis method that compares their content to patterns and code samples often used by in malicious scripts. It is very important to understand that a file marked by Malware Scanner as suspicious does NOT have contain "bad" code. It might just be code that looks bad.', 'security-ninja' ); ?></p>
	<p class="description"><?php esc_html_e( "That's why it is very important to go through the files manually and have a look at the suspicious lines of code. If you are certain they are ok - whitelist the file.", 'security-ninja' ); ?></p>
	<p class="description"><?php esc_html_e( "Many popular plugins' and themes' files can appear on the scan list. Again this does not mean they will do harm to your site. It just means you need to have a closer look at their content.", 'security-ninja' ); ?></p>
</div>
		<?php
	}

	/**
	 * Display warning if test were never run
	 * @return [type] [description]
	 */
	public static function warnings() {
		$last_run = self::get_results( 'last_run' );

		if ( ! wf_sn::is_plugin_page() ) {
			return;
		}

		$memory = ini_get( 'memory_limit' );
		if ( wf_sn::is_plugin_page() && (int) -1 !== $memory && (int) $memory < 64 && false === stripos( $memory, 'G' ) ) {
			echo '<div class="notice updated sn_ms_warning"><p>Your PHP memory limit is only ' . $memory . 'MB. Malware Scanner may not be able to scan all your files. Please ask your hoster to increase the limit.</p></div>';
		}

		if ( ! empty( $last_run ) && wf_sn::is_plugin_page() && ( time() - 30 * 24 * 60 * 60 ) > $last_run ) {
			echo '<div class="notice notice-error wf-sn-ms-not-run"><p>';

			esc_html_e( "Malware Scanner tests were not run for more than 30 days. It's advisable to run them once in a while. Click 'Scan files' to run them now and check your files for malware.", 'security-ninja' );

			echo '</p></div>';
		}
	} // run_tests_warning

	// activate plugin
	public static function activate() {

		// force update by deleting last timestamp
		delete_option( WF_SN_MS_LAST_PATTERN_UPDATE );
		self::get_or_update_samples();
	} // activate

	/**
	 * Clean-up when deactivated
	 * @return [type] [description]
	 */
	public static function deactivate() {
		delete_option( WF_SN_MS_OPTIONS );
		delete_option( WF_SN_MS_RESULTS );
		delete_option( WF_SN_MS_INTEGRITY_RESULTS );
		delete_option( WF_SN_MS_CACHE );
		delete_option( WF_SN_MS_WHITELIST );
		delete_option( WF_SN_MS_DELETELIST );
		delete_option( WF_SN_MS_SCAN_TOTAL_TIME );
		delete_option( WF_SN_MS_SK );
		delete_option( WF_SN_MS_IV );
		delete_option( WF_SN_MS_LAST_PATTERN_UPDATE );

		// Removes scheduled event to download samples
		$timestamp = wp_next_scheduled( 'secnin_update_samples' );

		if ( $timestamp ) {
			wp_unschedule_event( $timestamp, 'secnin_update_samples' );
		}

		// remove the upload folder with cached files.
		$upload_dir = wp_upload_dir();
		$json_dir   = $upload_dir['basedir'] . '/security-ninja/';

		if ( file_exists( $json_dir ) ) {
			$it    = new RecursiveDirectoryIterator( $json_dir, RecursiveDirectoryIterator::SKIP_DOTS );
			$files = new RecursiveIteratorIterator( $it, RecursiveIteratorIterator::CHILD_FIRST );
			foreach ( $files as $file ) {
				if ( $file->isDir() ) {
					rmdir( $file->getRealPath() );
				} else {
					unlink( $file->getRealPath() );
				}
			}
			rmdir( $json_dir );
		}
	} // deactivate
} // wf_sn_ms class

// setup environment when activated
register_activation_hook( WF_SN_BASE_FILE, array( 'wf_sn_ms', 'activate' ) );

// hook everything up
add_action( 'plugins_loaded', array( 'wf_sn_ms', 'init' ) );
// when deativated clean up
register_deactivation_hook( WF_SN_BASE_FILE, array( 'wf_sn_ms', 'deactivate' ) );
